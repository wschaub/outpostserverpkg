#!/bin/sh
#Very simple tar based install script generated by the outpostserverpkg
#build system.

#Source various makefile variables dumped out for us by the
#build
. ./vars
#Needed to check the the OS we are running under
. /etc/lsb-release

#Bomb out if we aren't root
UID=`id -u`
if [ $UID -ne 0 ]
then
    echo This script can only be run as root
    exit 1
fi

#Refuse to run if executed on a diffrent distro than built for.
if [ "$DISTRIB_ID" = "$TARGET_DISTRIB_ID" ]
then
    true
else
    echo This package was built for $TARGET_DISTRIB_ID but you are running $DISTRIB_ID
    exit 1
fi

#Give a warning and ask to continue if the OS codename is different
if [ "$DISTRIB_CODENAME" = "$TARGET_DISTRIB_CODENAME" ]
then
   true
  else
     echo WARNING: this package was built for $TARGET_DISTRIB_CODENAME do you wish to continue? Y/N
     read choice
     case $choice in
         Y) true;;
         y) true;;
         N) exit 1;;
         n) exit 1;;
         *) exit 1;;
     esac
 fi

usage(){
    cat <<EOF
Usage: 
$0 install -- Install the package and the depends if its supported on your distro.

$0 uninstall -- Attempt to uninstall the package (You have to keep the unpacked directory around for this to work)
EOF

}

do_backup(){
    echo Running backup.
    mkdir backup
    echo Files to back up:
    for i in `tar tf image.tar`
    do
        if [ -f /$i ]
        then
            echo /$i >>backup/files
        fi
    done
    tar -czvf backup/backup.tgz -T backup/files
    echo Done backing up.
}
#attempt to uninstall the package, putting back any backups we made with 
#the install
do_uninstall(){
    if [ -f backup/backup.tgz ]
    then
        echo "Removing files included in package"
        tar tf image.tar | ( cd /; xargs rm )
        echo "Restoring backup archive"
        gunzip -c backup/backup.tgz | (cd /; tar xvpf -)
        if [ -e postrm ]
        then
            ./postrm
        fi
    else
        echo Nothing to uninstall from!
        exit 1
    fi
}

#Do an install.
#do_install refuses to install if a backup exists. it also trys to install
#the depends listed in DEPS if it detects we have apt-get on our system.
#a backup is done before install starts (see the do_backup function)
do_install(){

    #Don't attempt install if we already did an install before.
    if [ -d backup ]
    then
        echo Refusing to install an already installed package
        exit 1
    fi

    do_backup

    #Find out if we are on a distro based on the debian package system.
    which apt-get >/dev/null
    if [ $? ]
    then
        #if we have a list of deps attempt to install them.
        if [ -f DEPS ]
        then
            apt-get install `cat DEPS`
        fi

        if [ $? -eq 1 ]
        then
            echo Could not install depends. Exiting...
            exit 1
        fi
    fi
    echo Extracting files.
    cat image.tar | (cd /; tar xvpf -) 
    if [ -e posinst ]
    then
        echo Running postinst script.
        ./postinst
    fi


}

case $1 in
    uninstall)
        do_uninstall;;
    install)
        do_install;;
    *)
        usage;;
esac

